"""Initial schema

Revision ID: a308dd0df06f
Revises: 
Create Date: 2025-10-30 23:24:20.363327

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a308dd0df06f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('unit_preference', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('goals',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('race_distance', sa.Enum('FIVE_K', 'TEN_K', 'HALF_MARATHON', 'MARATHON', 'ULTRA_50K', 'ULTRA_50MI', 'ULTRA_100K', 'ULTRA_100MI', name='racedistance'), nullable=False),
    sa.Column('race_date', sa.Date(), nullable=False),
    sa.Column('target_time_seconds', sa.Float(), nullable=False),
    sa.Column('target_speed_mps', sa.Float(), nullable=True),
    sa.Column('current_fitness_level', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_goals_race_date'), 'goals', ['race_date'], unique=False)
    op.create_index(op.f('ix_goals_user_id'), 'goals', ['user_id'], unique=False)
    op.create_table('strava_connections',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('strava_athlete_id', sa.Integer(), nullable=False),
    sa.Column('access_token', sa.String(), nullable=False),
    sa.Column('refresh_token', sa.String(), nullable=False),
    sa.Column('expires_at', sa.Integer(), nullable=False),
    sa.Column('last_sync', sa.DateTime(), nullable=True),
    sa.Column('sync_enabled', sa.Boolean(), nullable=True),
    sa.Column('connected_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_strava_connections_strava_athlete_id'), 'strava_connections', ['strava_athlete_id'], unique=True)
    op.create_index(op.f('ix_strava_connections_user_id'), 'strava_connections', ['user_id'], unique=True)
    op.create_table('workouts',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('run_type', sa.Enum('EASY', 'RECOVERY', 'LONG', 'TEMPO', 'INTERVALS', 'HILL_REPEATS', 'PROGRESSION', 'RACE', 'REST', name='runtype'), nullable=False),
    sa.Column('metrics', sa.JSON(), nullable=False),
    sa.Column('streams', sa.JSON(), nullable=True),
    sa.Column('perceived_effort', sa.Integer(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('source', sa.String(), nullable=True),
    sa.Column('strava_activity_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workouts_date'), 'workouts', ['date'], unique=False)
    op.create_index(op.f('ix_workouts_strava_activity_id'), 'workouts', ['strava_activity_id'], unique=True)
    op.create_index(op.f('ix_workouts_user_id'), 'workouts', ['user_id'], unique=False)
    op.create_table('training_programs',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('goal_id', sa.String(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('total_weeks', sa.Integer(), nullable=False),
    sa.Column('rationale', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_training_programs_user_id'), 'training_programs', ['user_id'], unique=False)
    op.create_table('weekly_plans',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('training_program_id', sa.String(), nullable=False),
    sa.Column('week_number', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('phase', sa.Enum('BASE', 'BUILD', 'PEAK', 'TAPER', 'RECOVERY', name='trainingphase'), nullable=False),
    sa.Column('total_distance', sa.Float(), nullable=False),
    sa.Column('focus', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['training_program_id'], ['training_programs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_weekly_plans_start_date'), 'weekly_plans', ['start_date'], unique=False)
    op.create_index(op.f('ix_weekly_plans_training_program_id'), 'weekly_plans', ['training_program_id'], unique=False)
    op.create_table('planned_workouts',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('weekly_plan_id', sa.String(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('run_type', sa.Enum('EASY', 'RECOVERY', 'LONG', 'TEMPO', 'INTERVALS', 'HILL_REPEATS', 'PROGRESSION', 'RACE', 'REST', name='runtype'), nullable=False),
    sa.Column('intensity_zone', sa.Enum('RECOVERY', 'EASY', 'MODERATE', 'THRESHOLD', 'HARD', name='intensityzone'), nullable=False),
    sa.Column('target_distance', sa.Float(), nullable=True),
    sa.Column('target_duration', sa.Float(), nullable=True),
    sa.Column('target_speed', sa.Float(), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('completed', sa.Boolean(), nullable=True),
    sa.Column('actual_workout_id', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['actual_workout_id'], ['workouts.id'], ),
    sa.ForeignKeyConstraint(['weekly_plan_id'], ['weekly_plans.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_planned_workouts_date'), 'planned_workouts', ['date'], unique=False)
    op.create_index(op.f('ix_planned_workouts_weekly_plan_id'), 'planned_workouts', ['weekly_plan_id'], unique=False)
    op.create_table('weekly_evaluations',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('weekly_plan_id', sa.String(), nullable=False),
    sa.Column('completion_rate', sa.Float(), nullable=False),
    sa.Column('total_distance_actual', sa.Float(), nullable=False),
    sa.Column('weekly_feedback', sa.Text(), nullable=False),
    sa.Column('recommended_adjustments', sa.Text(), nullable=True),
    sa.Column('fatigue_assessment', sa.Text(), nullable=True),
    sa.Column('evaluated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['weekly_plan_id'], ['weekly_plans.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_weekly_evaluations_user_id'), 'weekly_evaluations', ['user_id'], unique=False)
    op.create_table('workout_evaluations',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('planned_workout_id', sa.String(), nullable=False),
    sa.Column('actual_workout_id', sa.String(), nullable=True),
    sa.Column('completed', sa.Boolean(), nullable=False),
    sa.Column('adherence_score', sa.Float(), nullable=False),
    sa.Column('feedback', sa.Text(), nullable=False),
    sa.Column('adjustments_needed', sa.Boolean(), nullable=False),
    sa.Column('evaluated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['actual_workout_id'], ['workouts.id'], ),
    sa.ForeignKeyConstraint(['planned_workout_id'], ['planned_workouts.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workout_evaluations_user_id'), 'workout_evaluations', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_workout_evaluations_user_id'), table_name='workout_evaluations')
    op.drop_table('workout_evaluations')
    op.drop_index(op.f('ix_weekly_evaluations_user_id'), table_name='weekly_evaluations')
    op.drop_table('weekly_evaluations')
    op.drop_index(op.f('ix_planned_workouts_weekly_plan_id'), table_name='planned_workouts')
    op.drop_index(op.f('ix_planned_workouts_date'), table_name='planned_workouts')
    op.drop_table('planned_workouts')
    op.drop_index(op.f('ix_weekly_plans_training_program_id'), table_name='weekly_plans')
    op.drop_index(op.f('ix_weekly_plans_start_date'), table_name='weekly_plans')
    op.drop_table('weekly_plans')
    op.drop_index(op.f('ix_training_programs_user_id'), table_name='training_programs')
    op.drop_table('training_programs')
    op.drop_index(op.f('ix_workouts_user_id'), table_name='workouts')
    op.drop_index(op.f('ix_workouts_strava_activity_id'), table_name='workouts')
    op.drop_index(op.f('ix_workouts_date'), table_name='workouts')
    op.drop_table('workouts')
    op.drop_index(op.f('ix_strava_connections_user_id'), table_name='strava_connections')
    op.drop_index(op.f('ix_strava_connections_strava_athlete_id'), table_name='strava_connections')
    op.drop_table('strava_connections')
    op.drop_index(op.f('ix_goals_user_id'), table_name='goals')
    op.drop_index(op.f('ix_goals_race_date'), table_name='goals')
    op.drop_table('goals')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
